Python Flask Tutorial - Full-Featured Web App Part 3 - Forms and User Input
https://www.youtube.com/watch?v=UIJKdCIEXUQ

https://flask-wtf.readthedocs.io/en/1.2.x/
https://cheatography.com/khalidhariry/cheat-sheets/flask-wtf-and-quick-reference/

============================================================
Video time stamps and topic copied from a post by @1cannon3
============================================================
2:03 - importing wtforms
2:15 - HTML forms vs Python for forms
2:34 - Registration form
2:39 - Creating first RegistrationForm (This inherits from FlaskForm)
2:48 - Having different form fields
2:55 - Adding a username field
3:00 - A username is a "StringField" (From wtforms)
3:40 - Including limitations for usernames (or other fields)
4:08 - Validators
4:19 - Validators are arguments you pass into your fields
4:25 - Passing a list of validators
4:36 - "DataRequired" validator
4:41 - "wtforms.validators"
5:03 - "Length" validator
5:51 - "Email" validator
6:33 - "Password" field
7:16 - Password confirmation
7:27 - "EqualTo" validator for password confirmation
8:00 - "EqualTo" arguments are the field you want this to be field to be equal to
8:12 - Submit button
8:20 - "Submit" field
8:50 - Creating a login form
9:35 - Adding a "remember" field, cookie, so browser remembers users
10:20 - Setting a secret key for your application
12:15 - Creating routes for registration and login forms
12:22 - Registration route
14:08 - Creating templates for registration & login form
============================================================
----VSCode terminal----
pip list
PS C:\Users\bfvdi\Desktop\flask-web-blog> pip list
Package       Version
------------- -------
blinker       1.8.2
click         8.1.7
colorama      0.4.6
Flask         3.0.3
itsdangerous  2.2.0
Jinja2        3.1.4
MarkupSafe    3.0.2
pip           24.3.1
python-dotenv 1.0.1
Werkzeug      3.1.1
PS C:\Users\bfvdi\Desktop\flask-web-blog>
---------------------
pip install flask-wtf
---------------------
PS C:\Users\bfvdi\Desktop\flask-web-blog> pip list
Package       Version
------------- -------
blinker       1.8.2
click         8.1.7
colorama      0.4.6
Flask         3.0.3
Flask-WTF     1.2.2
itsdangerous  2.2.0
Jinja2        3.1.4
MarkupSafe    3.0.2
pip           24.3.1
python-dotenv 1.0.1
Werkzeug      3.1.1
WTForms       3.2.1
PS C:\Users\bfvdi\Desktop\flask-web-blog> 
------------- -------
Create a new file called forms.py.
forms.py should be in the same folder as flaskblog.py
----forms.py----
from flask-wtf import FlaskForm
from wtforms import StringField, PasswordField, SubmitField, BooleanField
from wtforms.validators import DataRequired, Length, Email, EqualTo


class RegistrationForm(FlaskForm):
    username = StringField('Username',
                           validators=[DataRequired(), Length(min=2, max=20)])
    email = StringField('Email',
                        validators=[DataRequired(), Email()])
    password = PasswordField('Password', validators=[DataRequired()])
    confirm_password = PasswordField('Confirm Password',
                                     validators=[DataRequired(), EqualTo('password')])
    submit = SubmitField('Sign Up')


class LoginForm(FlaskForm):
    email = StringField('Email',
                        validators=[DataRequired(), Email()])
    password = PasswordField('Password', validators=[DataRequired()])
    remember = BooleanField('Remember Me')
    submit = SubmitField('Login')
------------------------
Add routes for login and Register
------------------------
----flaskblog.py----
@app.route("/register", methods=['GET', 'POST'])
def register():
    form = RegistrationForm()
    if form.validate_on_submit():
        flash(f'Account created for {form.username.data}!', 'success')
        return redirect(url_for('home'))
    return render_template('register.html', title='Register', form=form)


@app.route("/login", methods=['GET', 'POST'])
def login():
    form = LoginForm()
    if form.validate_on_submit():
        if form.email.data == 'admin@blog.com' and form.password.data == 'password':
            flash('You have been logged in!', 'success')
            return redirect(url_for('home'))
        else:
            flash('Login Unsuccessful. Please check username and password', 'danger')
    return render_template('login.html', title='Login', form=form)
------------------------ 
create new file login.html
----login.html----
{% extends "layout.html" %}
{% block content %}
    <div class="content-section">
        <form method="POST" action="">
            {{ form.hidden_tag() }}
            <fieldset class="form-group">
                <legend class="border-bottom mb-4">Log In</legend>
                <div class="form-group">
                    {{ form.email.label(class="form-control-label") }}
                    {% if form.email.errors %}
                        {{ form.email(class="form-control form-control-lg is-invalid") }}
                        <div class="invalid-feedback">
                            {% for error in form.email.errors %}
                                <span>{{ error }}</span>
                            {% endfor %}
                        </div>
                    {% else %}
                        {{ form.email(class="form-control form-control-lg") }}
                    {% endif %}
                </div>
                <div class="form-group">
                    {{ form.password.label(class="form-control-label") }}
                    {% if form.password.errors %}
                        {{ form.password(class="form-control form-control-lg is-invalid") }}
                        <div class="invalid-feedback">
                            {% for error in form.password.errors %}
                                <span>{{ error }}</span>
                            {% endfor %}
                        </div>
                    {% else %}
                        {{ form.password(class="form-control form-control-lg") }}
                    {% endif %}
                </div>
                <div class="form-check">
                    {{ form.remember(class="form-check-input") }}
                    {{ form.remember.label(class="form-check-label") }}
                </div>
            </fieldset>
            <div class="form-group">
                {{ form.submit(class="btn btn-outline-info") }}
            </div>
            <small class="text-muted ml-2">
                <a href="#">Forgot Password?</a>
            </small>
        </form>
    </div>
    <div class="border-top pt-3">
        <small class="text-muted">
            Need An Account? <a class="ml-2" href="{{ url_for('register') }}">Sign Up Now</a>
        </small>
    </div>
{% endblock content %}
------------------------
Create new file register.html
----register.html----
{% extends "layout.html" %}
{% block content %}
    <div class="content-section">
        <form method="POST" action="">
            {{ form.hidden_tag() }}
            <fieldset class="form-group">
                <legend class="border-bottom mb-4">Join Today</legend>
                <div class="form-group">
                    {{ form.username.label(class="form-control-label") }}

                    {% if form.username.errors %}
                        {{ form.username(class="form-control form-control-lg is-invalid") }}
                        <div class="invalid-feedback">
                            {% for error in form.username.errors %}
                                <span>{{ error }}</span>
                            {% endfor %}
                        </div>
                    {% else %}
                        {{ form.username(class="form-control form-control-lg") }}
                    {% endif %}
                </div>
                <div class="form-group">
                    {{ form.email.label(class="form-control-label") }}
                    {% if form.email.errors %}
                        {{ form.email(class="form-control form-control-lg is-invalid") }}
                        <div class="invalid-feedback">
                            {% for error in form.email.errors %}
                                <span>{{ error }}</span>
                            {% endfor %}
                        </div>
                    {% else %}
                        {{ form.email(class="form-control form-control-lg") }}
                    {% endif %}
                </div>
                <div class="form-group">
                    {{ form.password.label(class="form-control-label") }}
                    {% if form.password.errors %}
                        {{ form.password(class="form-control form-control-lg is-invalid") }}
                        <div class="invalid-feedback">
                            {% for error in form.password.errors %}
                                <span>{{ error }}</span>
                            {% endfor %}
                        </div>
                    {% else %}
                        {{ form.password(class="form-control form-control-lg") }}
                    {% endif %}
                </div>
                <div class="form-group">
                    {{ form.confirm_password.label(class="form-control-label") }}
                    {% if form.confirm_password.errors %}
                        {{ form.confirm_password(class="form-control form-control-lg is-invalid") }}
                        <div class="invalid-feedback">
                            {% for error in form.confirm_password.errors %}
                                <span>{{ error }}</span>
                            {% endfor %}
                        </div>
                    {% else %}
                        {{ form.confirm_password(class="form-control form-control-lg") }}
                    {% endif %}
                </div>
            </fieldset>
            <div class="form-group">
                {{ form.submit(class="btn btn-outline-info") }}
            </div>
        </form>
    </div>
    <div class="border-top pt-3">
        <small class="text-muted">
            Already Have An Account? <a class="ml-2" href="{{ url_for('login') }}">Sign In</a>
        </small>
    </div>
{% endblock content %}
---------------------
Copilot code fixes
----flaskblog.py----
from flask import Flask, render_template, url_for, redirect, flash
from forms import RegistrationForm, LoginForm  # Add this import
from dotenv import load_dotenv
import os


load_dotenv()

app = Flask(__name__)

posts = [
    {
        'author': 'Corey Schafer',
        'title': 'Blog Post 1',
        'content': 'First post content',
        'date_posted': 'April 20, 2018'
    },
    {
        'author': 'Jane Doe',
        'title': 'Blog Post 2',
        'content': 'Second post content',
        'date_posted': 'April 21, 2018'
    }
]

@app.route("/")
@app.route("/home")
def home():
    return render_template('home.html', posts=posts)
    #return render_template("home.html")

@app.route("/about")
def about():
	return render_template("about.html")

@app.route("/register", methods=['GET', 'POST'])
def register():
    form = RegistrationForm()
    if form.validate_on_submit():
        flash(f'Account created for {form.username.data}!', 'success')
        return redirect(url_for('home'))
    return render_template('register.html', title='Register', form=form)


@app.route("/login", methods=['GET', 'POST'])
def login():
    form = LoginForm()
    if form.validate_on_submit():
        if form.email.data == 'admin@blog.com' and form.password.data == 'password':
            flash('You have been logged in!', 'success')
            return redirect(url_for('home'))
        else:
            flash('Login Unsuccessful. Please check username and password', 'danger')
    return render_template('login.html', title='Login', form=form)

# @app.route("/home")
# def home():
# 	return "<h1>Home Page</h1>"

# @app.route("/about")
# def about():
# 	return "<h1>About Page</h1>"

if __name__ == '__main__':
    app.run(debug=True)
---------------------------
Run flaskbog.py error in Chrome
---------------------------
RuntimeError: A secret key is required to use CSRF.
---------------------------
Create .env file
---.env---
Add secret_key to .env file
SECRET_KEY = 'some_random_string_of_32_charcters'
---------
Add code to load secret_key from '.env' to flaskblog.py
----flaskblog.py----
from flask import Flask, render_template, url_for, redirect, flash
from forms import RegistrationForm, LoginForm  # Add this import
from dotenv import load_dotenv
import os


load_dotenv()

app = Flask(__name__)
app.config['SECRET_KEY'] = os.getenv('SECRET_KEY')

posts = [
    {
        'author': 'Corey Schafer',
        'title': 'Blog Post 1',
        'content': 'First post content',
        'date_posted': 'April 20, 2018'
    },
    {
        'author': 'Jane Doe',
        'title': 'Blog Post 2',
        'content': 'Second post content',
        'date_posted': 'April 21, 2018'
    }
]

@app.route("/")
@app.route("/home")
def home():
    return render_template('home.html', posts=posts)
    #return render_template("home.html")

@app.route("/about")
def about():
	return render_template("about.html")

@app.route("/register", methods=['GET', 'POST'])
def register():
    form = RegistrationForm()
    if form.validate_on_submit():
        flash(f'Account created for {form.username.data}!', 'success')
        return redirect(url_for('home'))
    return render_template('register.html', title='Register', form=form)


@app.route("/login", methods=['GET', 'POST'])
def login():
    form = LoginForm()
    if form.validate_on_submit():
        if form.email.data == 'admin@blog.com' and form.password.data == 'password':
            flash('You have been logged in!', 'success')
            return redirect(url_for('home'))
        else:
            flash('Login Unsuccessful. Please check username and password', 'danger')
    return render_template('login.html', title='Login', form=form)

# @app.route("/home")
# def home():
# 	return "<h1>Home Page</h1>"

# @app.route("/about")
# def about():
# 	return "<h1>About Page</h1>"

if __name__ == '__main__':
    app.run(debug=True)
--------------------
Chrome browser - 
Brought to you by DON'T PANIC, your friendly Werkzeug powered traceback interpreter.

The following exception occurred when trying to register as a new user:
chatGPT4 query:
"Exception: Install 'email_validator' for email validation support.
flask-web-blog\.venv\Lib\site-packages\wtforms\validators.py", line 401, in __call__"

pip install email_validator
PS C:\Users\bfvdi\Desktop\flask-web-blog> pip list
Package         Version
--------------- -------
blinker         1.8.2
click           8.1.7
colorama        0.4.6
dnspython       2.7.0
email_validator 2.2.0
Flask           3.0.3
Flask-WTF       1.2.2
idna            3.10
itsdangerous    2.2.0
Jinja2          3.1.4
MarkupSafe      3.0.2
pip             24.3.1
python-dotenv   1.0.1
Werkzeug        3.1.1
WTForms         3.2.1
PS C:\Users\bfvdi\Desktop\flask-web-blog> 
---------------
Test Register new user.
Now able to register as a new user. No respose to login.
----end of Part 3-----


